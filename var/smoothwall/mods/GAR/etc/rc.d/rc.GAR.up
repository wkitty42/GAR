#! /bin/bash
## rc.GAR.up - wkitty42 - July 2014
##   performs the initial buildup of the GAR related iptables rules and
##   chains. GAR then adds and removes IPs to the GARblockset ipset list
##   of blocked IPs during its execution.

. /var/smoothwall/main/productdata
. /var/smoothwall/ethernet/settings

/usr/bin/logger -t GAR "============ $(basename $0) start ============"

# first create the GARblockset
if [ "$VERSION" = "3.0" ];
then
    /usr/bin/logger -t GAR "Creating empty GARblockset on SWE$VERSION"
    /usr/sbin/ipset -N GARblockset iphash
    CMDRESULT=$?
    /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
else
    /usr/bin/logger -t GAR "Creating empty GARblockset on SWE$VERSION"
    /usr/sbin/ipset create GARblockset hash:ip
    CMDRESULT=$?
    /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
fi


# second create GARdrop chain to drop traffic from blocked external WAN IPs
/usr/bin/logger -t GAR "Creating GARdrop chain"
/sbin/iptables -N GARdrop
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
/usr/bin/logger -t GAR "Adding GARdrop LOG rule"
/sbin/iptables -A GARdrop -j LOG --log-prefix 'GARdrop: '
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
# if a blocked WAN IP is sending traffic to an internal machine, break
# the connection
/usr/bin/logger -t GAR "Adding GARdrop ESTABLISHED RESET rule"
/sbin/iptables -A GARdrop -p tcp -m state --state ESTABLISHED -j REJECT --reject-with tcp-reset
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
# if a blocked WAN IP is trying to connect to an internal machine, drop
# the traffic
/usr/bin/logger -t GAR "Adding GARdrop DROP rule"
/sbin/iptables -A GARdrop -j DROP
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"


# third create GARreject chain to reject traffic to blocked external WAN IPs
/usr/bin/logger -t GAR "Creating GARreject chain"
/sbin/iptables -N GARreject
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
## do the following on a per interface basis so we can have a better idea of
## what machines may be the culprits trying or talking to blocked WAN IPs
if [ "$GREEN_DEV" != "" ]; then
# if internal machines are sending traffic to a blocked WAN IP, break the connection
  /usr/bin/logger -t GAR "Adding GARreject LOG rule for GREEN reset"
  /sbin/iptables -A GARreject -i $GREEN_DEV -j LOG --log-prefix 'GARreject (GRN rst): '
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
  /usr/bin/logger -t GAR "Adding GARreject GREEN_DEV ESTABLISHED RESET rule"
  /sbin/iptables -A GARreject -i $GREEN_DEV -p tcp -m state --state ESTABLISHED -j REJECT --reject-with tcp-reset
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
# if internal machines are trying to send traffic to a blocked WAN IP, reject the traffic
  /usr/bin/logger -t GAR "Adding GARreject LOG rule for GREEN reject"
  /sbin/iptables -A GARreject -i $GREEN_DEV -j LOG --log-prefix 'GARreject (GRN phb): '
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
  /usr/bin/logger -t GAR "Adding GARreject GREEN_DEV REJECT PROHIBITED rule"
  /sbin/iptables -A GARreject -i $GREEN_DEV -j REJECT --reject-with icmp-admin-prohibited
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
fi
if [ "$PURPLE_DEV" != "" ]; then
# if internal machines are sending traffic to a blocked WAN IP, break the connection
  /usr/bin/logger -t GAR "Adding GARreject LOG rule for PURPLE reset"
  /sbin/iptables -A GARreject -i $PURPLE_DEV -j LOG --log-prefix 'GARreject (PRP rst): '
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
  /usr/bin/logger -t GAR "Adding GARreject PURPLE_DEV ESTABLISHED RESET rule"
  /sbin/iptables -A GARreject -i $PURPLE_DEV -p tcp -m state --state ESTABLISHED -j REJECT --reject-with tcp-reset
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
# if internal machines are trying to send traffic to a blocked WAN IP, reject the traffic
  /usr/bin/logger -t GAR "Adding GARreject LOG rule for PURPLE reject"
  /sbin/iptables -A GARreject -i $PURPLE_DEV -j LOG --log-prefix 'GARreject (PRP phb): '
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
  /usr/bin/logger -t GAR "Adding GARreject PURPLE_DEV REJECT PROHIBITED rule"
  /sbin/iptables -A GARreject -i $PURPLE_DEV -j REJECT --reject-with icmp-admin-prohibited
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
fi
if [ "$ORANGE_DEV" != "" ]; then
# if internal machines are sending traffic to a blocked WAN IP, break the connection
  /usr/bin/logger -t GAR "Adding GARreject LOG rule for ORANGE reset"
  /sbin/iptables -A GARreject -i $ORANGE_DEV -j LOG --log-prefix 'GARreject (ORN rst): '
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
  /usr/bin/logger -t GAR "Adding GARreject ORANGE_DEV ESTABLISHED RESET rule"
  /sbin/iptables -A GARreject -i $ORANGE_DEV -p tcp -m state --state ESTABLISHED -j REJECT --reject-with tcp-reset
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
# if internal machines are trying to send traffic to a blocked WAN IP, reject the traffic
  /usr/bin/logger -t GAR "Adding GARreject LOG rule for ORANGE reject"
  /sbin/iptables -A GARreject -i $ORANGE_DEV -j LOG --log-prefix 'GARreject (ORN phb): '
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
  /usr/bin/logger -t GAR "Adding GARreject ORANGE_DEV REJECT PROHIBITED rule"
  /sbin/iptables -A GARreject -i $ORANGE_DEV -j REJECT --reject-with icmp-admin-prohibited
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
fi


# fourth create the GARcheck chains and preload them with GARblockset
# do GARcheckInbound first
/usr/bin/logger -t GAR "Creating GARcheckInbound chain"
/sbin/iptables -N GARcheckInbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
/usr/bin/logger -t GAR "Preloading GARcheckInbound with GARblockset"
/sbin/iptables -A GARcheckInbound -m set --match-set GARblockset src -j GARdrop
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
# do GARcheckOutbound second
/usr/bin/logger -t GAR "Creating GARcheckOutbound chain"
/sbin/iptables -N GARcheckOutbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
/usr/bin/logger -t GAR "preloading GARcheckOutbound with empty GARblockset"
/sbin/iptables -A GARcheckOutbound -m set --match-set GARblockset dst -j GARreject
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"

# fifth insert the GARcheck* chains into the INPUT, FORWARD and OUTPUT chains
## INPUT sees inbound traffic to the local machine
/usr/bin/logger -t GAR "Inserting ppp0 GARcheckInbound into INPUT chain"
/sbin/iptables -I INPUT -i ppp0 -j GARcheckInbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
/usr/bin/logger -t GAR "Inserting ippp0 GARcheckInbound into INPUT chain"
/sbin/iptables -I INPUT -i ippp0 -j GARcheckInbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
if [ "$RED_DEV" != "" ]; then
  /usr/bin/logger -t GAR "Inserting RED_DEV GARcheckInbound into INPUT chain"
  /sbin/iptables -I INPUT -i $RED_DEV -j GARcheckInbound
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
fi
## FORWARD sees traffic going both ways from the protected LANs
/usr/bin/logger -t GAR "Inserting ppp0 GARcheckOutbound into FORWARD chain"
/sbin/iptables -I FORWARD -o ppp0 -j GARcheckOutbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
/usr/bin/logger -t GAR "Inserting ippp0 GARcheckOutbound into FORWARD chain"
/sbin/iptables -I FORWARD -o ippp0 -j GARcheckOutbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
if [ "$RED_DEV" != "" ]; then
  /usr/bin/logger -t GAR "Inserting RED_DEV GARcheckOutbound into FORWARD chain"
  /sbin/iptables -I FORWARD -o $RED_DEV -j GARcheckOutbound
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
fi
/usr/bin/logger -t GAR "Inserting ppp0 GARcheckInbound into FORWARD chain"
/sbin/iptables -I FORWARD -i ppp0 -j GARcheckInbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
/usr/bin/logger -t GAR "Inserting ippp0 GARcheckInbound into FORWARD chain"
/sbin/iptables -I FORWARD -i ippp0 -j GARcheckInbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
if [ "$RED_DEV" != "" ]; then
  /usr/bin/logger -t GAR "Inserting RED_DEV GARcheckInbound into FORWARD chain"
  /sbin/iptables -I FORWARD -i $RED_DEV -j GARcheckInbound
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
fi
## OUTPUT sees outbound traffic from the local machine
/usr/bin/logger -t GAR "Inserting ppp0 GARcheckOutbound into OUTPUT chain"
/sbin/iptables -I OUTPUT -o ppp0 -j GARcheckOutbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
/usr/bin/logger -t GAR "Inserting ippp0 GARcheckOutbound into OUTPUT chain"
/sbin/iptables -I OUTPUT -o ippp0 -j GARcheckOutbound
CMDRESULT=$?
/usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
if [ "$RED_DEV" != "" ]; then
  /usr/bin/logger -t GAR "Inserting RED_DEV GARcheckOutbound into OUTPUT chain"
  /sbin/iptables -I OUTPUT -o $RED_DEV -j GARcheckOutbound
  CMDRESULT=$?
  /usr/bin/logger -t GAR "CMDRESULT : $CMDRESULT"
fi

/usr/bin/logger -t GAR "============ $(basename $0) stop ============"

exit 0
